"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3295],{55877:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>_,contentTitle:()=>l,default:()=>a,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var t=i(74848),s=i(28453);const o={},l="nvm\u5b89\u88c5",r={id:"linux/\u5305\u7ba1\u7406\u5de5\u5177/nvm/nvm\u5b89\u88c5",title:"nvm\u5b89\u88c5",description:"nvm github\u5730\u5740",source:"@site/docs/linux/\u5305\u7ba1\u7406\u5de5\u5177/nvm/nvm\u5b89\u88c5.md",sourceDirName:"linux/\u5305\u7ba1\u7406\u5de5\u5177/nvm",slug:"/linux/\u5305\u7ba1\u7406\u5de5\u5177/nvm/nvm\u5b89\u88c5",permalink:"/docs/linux/\u5305\u7ba1\u7406\u5de5\u5177/nvm/nvm\u5b89\u88c5",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"gvm\u5b89\u88c5",permalink:"/docs/linux/\u5305\u7ba1\u7406\u5de5\u5177/gvm/gvm\u5b89\u88c5"},next:{title:"\u6d4b\u8bd5Linux\u4e0b\u5220\u9664\u5927\u91cf\u6587\u4ef6\u7684\u6548\u7387",permalink:"/docs/linux/\u6027\u80fd\u6d4b\u8bd5/\u6587\u4ef6\u5220\u9664\u6548\u7387\u6d4b\u8bd5/\u6d4b\u8bd5Linux\u4e0b\u5220\u9664\u5927\u91cf\u6587\u4ef6\u7684\u6548\u7387"}},_={},c=[{value:"1.nvm\u7b80\u4ecb",id:"1nvm\u7b80\u4ecb",level:2},{value:"2.\u5b89\u88c5",id:"2\u5b89\u88c5",level:2},{value:"3.\u4f7f\u7528",id:"3\u4f7f\u7528",level:2},{value:"4.\u914d\u7f6e\u52a0\u901f",id:"4\u914d\u7f6e\u52a0\u901f",level:2},{value:"4.1 \u914d\u7f6enpm\u5b89\u88c5\u52a0\u901f",id:"41-\u914d\u7f6enpm\u5b89\u88c5\u52a0\u901f",level:3},{value:"4.2 \u914d\u7f6envm\u5b89\u88c5\u52a0\u901f",id:"42-\u914d\u7f6envm\u5b89\u88c5\u52a0\u901f",level:3}];function h(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"nvm\u5b89\u88c5",children:"nvm\u5b89\u88c5"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://github.com/nvm-sh/nvm",children:"nvm github\u5730\u5740"})}),"\n",(0,t.jsx)(e.h2,{id:"1nvm\u7b80\u4ecb",children:"1.nvm\u7b80\u4ecb"}),"\n",(0,t.jsxs)(e.p,{children:["nvm\u662f\u4e00\u4e2a ",(0,t.jsx)(e.a,{href:"https://nodejs.org/zh-cn",children:"node.js"}),"  \u7684\u7248\u672c\u7ba1\u7406\u5de5\u5177\uff0c\u4f7f\u7528nvm\u53ef\u4ee5\u65b9\u4fbf\u7684\u901a\u8fc7\u547d\u4ee4\u884c\u6765\u5207\u6362\u4e0d\u540c\u7684node\u7248\u672c"]}),"\n",(0,t.jsx)(e.h2,{id:"2\u5b89\u88c5",children:"2.\u5b89\u88c5"}),"\n",(0,t.jsx)(e.p,{children:"\u53ef\u4ee5\u4f7f\u7528\u5b98\u65b9\u7684\u4e00\u952e\u5b89\u88c5\u811a\u672c\u8fdb\u884c\u5b89\u88c5"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash\n"})}),"\n",(0,t.jsxs)(e.p,{children:["\u811a\u672c\u5185\u5bb9\u5982\u4e0b\uff0c\u5176\u4e2d\u6709\u4e00\u884c\u914d\u7f6e ",(0,t.jsx)(e.code,{children:'NVM_SOURCE_URL="https://github.com/${NVM_GITHUB_REPO}.git"'})," \uff0c\u8fd9\u91cc\u7684\u5730\u5740\u662f ",(0,t.jsx)(e.code,{children:"github.com"}),"\uff0c\u7531\u4e8e\u67d0\u4e9b\u7279\u6b8a\u539f\u56e0\uff0c\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e2a\u5730\u5740\u4fee\u6539\u4e3a\u52a0\u901f\u5730\u5740"]}),"\n",(0,t.jsx)(e.p,{children:":::tip\u8bf4\u660e"}),"\n",(0,t.jsxs)(e.p,{children:["\u53d8\u91cf ",(0,t.jsx)(e.code,{children:"NVM_GITHUB_REPO"})," \u5bf9\u5e94\u7684\u503c\u662f ",(0,t.jsx)(e.code,{children:"nvm-sh/nvm"})]}),"\n",(0,t.jsxs)(e.p,{children:["\u4fee\u6539\n",(0,t.jsx)(e.code,{children:"https://github.com/${NVM_GITHUB_REPO}.git"})]}),"\n",(0,t.jsxs)(e.p,{children:["\u4fee\u6539\u4e3a\n",(0,t.jsx)(e.code,{children:"https://gh.con.sh/https://github.com/${NVM_GITHUB_REPO}.git"})]}),"\n",(0,t.jsx)(e.p,{children:":::"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:'cat > nvm-install.sh << \'EOF\'\n#!/usr/bin/env bash\n\n{ # this ensures the entire script is downloaded #\n\nnvm_has() {\n  type "$1" > /dev/null 2>&1\n}\n\nnvm_echo() {\n  command printf %s\\\\n "$*" 2>/dev/null\n}\n\nif [ -z "${BASH_VERSION}" ] || [ -n "${ZSH_VERSION}" ]; then\n  # shellcheck disable=SC2016\n  nvm_echo >&2 \'Error: the install instructions explicitly say to pipe the install script to `bash`; please follow them\'\n  exit 1\nfi\n\nnvm_grep() {\n  GREP_OPTIONS=\'\' command grep "$@"\n}\n\nnvm_default_install_dir() {\n  [ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm"\n}\n\nnvm_install_dir() {\n  if [ -n "$NVM_DIR" ]; then\n    printf %s "${NVM_DIR}"\n  else\n    nvm_default_install_dir\n  fi\n}\n\nnvm_latest_version() {\n  nvm_echo "v0.39.3"\n}\n\nnvm_profile_is_bash_or_zsh() {\n  local TEST_PROFILE\n  TEST_PROFILE="${1-}"\n  case "${TEST_PROFILE-}" in\n    *"/.bashrc" | *"/.bash_profile" | *"/.zshrc" | *"/.zprofile")\n      return\n    ;;\n    *)\n      return 1\n    ;;\n  esac\n}\n\n#\n# Outputs the location to NVM depending on:\n# * The availability of $NVM_SOURCE\n# * The method used ("script" or "git" in the script, defaults to "git")\n# NVM_SOURCE always takes precedence unless the method is "script-nvm-exec"\n#\nnvm_source() {\n  local NVM_GITHUB_REPO\n  NVM_GITHUB_REPO="${NVM_INSTALL_GITHUB_REPO:-nvm-sh/nvm}"\n  local NVM_VERSION\n  NVM_VERSION="${NVM_INSTALL_VERSION:-$(nvm_latest_version)}"\n  local NVM_METHOD\n  NVM_METHOD="$1"\n  local NVM_SOURCE_URL\n  NVM_SOURCE_URL="$NVM_SOURCE"\n  if [ "_$NVM_METHOD" = "_script-nvm-exec" ]; then\n    NVM_SOURCE_URL="https://raw.githubusercontent.com/${NVM_GITHUB_REPO}/${NVM_VERSION}/nvm-exec"\n  elif [ "_$NVM_METHOD" = "_script-nvm-bash-completion" ]; then\n    NVM_SOURCE_URL="https://raw.githubusercontent.com/${NVM_GITHUB_REPO}/${NVM_VERSION}/bash_completion"\n  elif [ -z "$NVM_SOURCE_URL" ]; then\n    if [ "_$NVM_METHOD" = "_script" ]; then\n      NVM_SOURCE_URL="https://raw.githubusercontent.com/${NVM_GITHUB_REPO}/${NVM_VERSION}/nvm.sh"\n    elif [ "_$NVM_METHOD" = "_git" ] || [ -z "$NVM_METHOD" ]; then\n      # NVM_SOURCE_URL="https://github.com/${NVM_GITHUB_REPO}.git"\n      NVM_SOURCE_URL="https://gh.con.sh/github.com/${NVM_GITHUB_REPO}.git"\n    else\n      nvm_echo >&2 "Unexpected value \\"$NVM_METHOD\\" for \\$NVM_METHOD"\n      return 1\n    fi\n  fi\n  nvm_echo "$NVM_SOURCE_URL"\n}\n\n#\n# Node.js version to install\n#\nnvm_node_version() {\n  nvm_echo "$NODE_VERSION"\n}\n\nnvm_download() {\n  if nvm_has "curl"; then\n    curl --fail --compressed -q "$@"\n  elif nvm_has "wget"; then\n    # Emulate curl with wget\n    ARGS=$(nvm_echo "$@" | command sed -e \'s/--progress-bar /--progress=bar /\' \\\n                            -e \'s/--compressed //\' \\\n                            -e \'s/--fail //\' \\\n                            -e \'s/-L //\' \\\n                            -e \'s/-I /--server-response /\' \\\n                            -e \'s/-s /-q /\' \\\n                            -e \'s/-sS /-nv /\' \\\n                            -e \'s/-o /-O /\' \\\n                            -e \'s/-C - /-c /\')\n    # shellcheck disable=SC2086\n    eval wget $ARGS\n  fi\n}\n\ninstall_nvm_from_git() {\n  local INSTALL_DIR\n  INSTALL_DIR="$(nvm_install_dir)"\n  local NVM_VERSION\n  NVM_VERSION="${NVM_INSTALL_VERSION:-$(nvm_latest_version)}"\n  if [ -n "${NVM_INSTALL_VERSION:-}" ]; then\n    # Check if version is an existing ref\n    if command git ls-remote "$(nvm_source "git")" "$NVM_VERSION" | nvm_grep -q "$NVM_VERSION" ; then\n      :\n    # Check if version is an existing changeset\n    elif ! nvm_download -o /dev/null "$(nvm_source "script-nvm-exec")"; then\n      nvm_echo >&2 "Failed to find \'$NVM_VERSION\' version."\n      exit 1\n    fi\n  fi\n\n  local fetch_error\n  if [ -d "$INSTALL_DIR/.git" ]; then\n    # Updating repo\n    nvm_echo "=> nvm is already installed in $INSTALL_DIR, trying to update using git"\n    command printf \'\\r=> \'\n    fetch_error="Failed to update nvm with $NVM_VERSION, run \'git fetch\' in $INSTALL_DIR yourself."\n  else\n    fetch_error="Failed to fetch origin with $NVM_VERSION. Please report this!"\n    nvm_echo "=> Downloading nvm from git to \'$INSTALL_DIR\'"\n    command printf \'\\r=> \'\n    mkdir -p "${INSTALL_DIR}"\n    if [ "$(ls -A "${INSTALL_DIR}")" ]; then\n      # Initializing repo\n      command git init "${INSTALL_DIR}" || {\n        nvm_echo >&2 \'Failed to initialize nvm repo. Please report this!\'\n        exit 2\n      }\n      command git --git-dir="${INSTALL_DIR}/.git" remote add origin "$(nvm_source)" 2> /dev/null \\\n        || command git --git-dir="${INSTALL_DIR}/.git" remote set-url origin "$(nvm_source)" || {\n        nvm_echo >&2 \'Failed to add remote "origin" (or set the URL). Please report this!\'\n        exit 2\n      }\n    else\n      # Cloning repo\n      command git clone "$(nvm_source)" --depth=1 "${INSTALL_DIR}" || {\n        nvm_echo >&2 \'Failed to clone nvm repo. Please report this!\'\n        exit 2\n      }\n    fi\n  fi\n  # Try to fetch tag\n  if command git --git-dir="$INSTALL_DIR"/.git --work-tree="$INSTALL_DIR" fetch origin tag "$NVM_VERSION" --depth=1 2>/dev/null; then\n    :\n  # Fetch given version\n  elif ! command git --git-dir="$INSTALL_DIR"/.git --work-tree="$INSTALL_DIR" fetch origin "$NVM_VERSION" --depth=1; then\n    nvm_echo >&2 "$fetch_error"\n    exit 1\n  fi\n  command git -c advice.detachedHead=false --git-dir="$INSTALL_DIR"/.git --work-tree="$INSTALL_DIR" checkout -f --quiet FETCH_HEAD || {\n    nvm_echo >&2 "Failed to checkout the given version $NVM_VERSION. Please report this!"\n    exit 2\n  }\n  if [ -n "$(command git --git-dir="$INSTALL_DIR"/.git --work-tree="$INSTALL_DIR" show-ref refs/heads/master)" ]; then\n    if command git --no-pager --git-dir="$INSTALL_DIR"/.git --work-tree="$INSTALL_DIR" branch --quiet 2>/dev/null; then\n      command git --no-pager --git-dir="$INSTALL_DIR"/.git --work-tree="$INSTALL_DIR" branch --quiet -D master >/dev/null 2>&1\n    else\n      nvm_echo >&2 "Your version of git is out of date. Please update it!"\n      command git --no-pager --git-dir="$INSTALL_DIR"/.git --work-tree="$INSTALL_DIR" branch -D master >/dev/null 2>&1\n    fi\n  fi\n\n  nvm_echo "=> Compressing and cleaning up git repository"\n  if ! command git --git-dir="$INSTALL_DIR"/.git --work-tree="$INSTALL_DIR" reflog expire --expire=now --all; then\n    nvm_echo >&2 "Your version of git is out of date. Please update it!"\n  fi\n  if ! command git --git-dir="$INSTALL_DIR"/.git --work-tree="$INSTALL_DIR" gc --auto --aggressive --prune=now ; then\n    nvm_echo >&2 "Your version of git is out of date. Please update it!"\n  fi\n  return\n}\n\n#\n# Automatically install Node.js\n#\nnvm_install_node() {\n  local NODE_VERSION_LOCAL\n  NODE_VERSION_LOCAL="$(nvm_node_version)"\n\n  if [ -z "$NODE_VERSION_LOCAL" ]; then\n    return 0\n  fi\n\n  nvm_echo "=> Installing Node.js version $NODE_VERSION_LOCAL"\n  nvm install "$NODE_VERSION_LOCAL"\n  local CURRENT_NVM_NODE\n\n  CURRENT_NVM_NODE="$(nvm_version current)"\n  if [ "$(nvm_version "$NODE_VERSION_LOCAL")" == "$CURRENT_NVM_NODE" ]; then\n    nvm_echo "=> Node.js version $NODE_VERSION_LOCAL has been successfully installed"\n  else\n    nvm_echo >&2 "Failed to install Node.js $NODE_VERSION_LOCAL"\n  fi\n}\n\ninstall_nvm_as_script() {\n  local INSTALL_DIR\n  INSTALL_DIR="$(nvm_install_dir)"\n  local NVM_SOURCE_LOCAL\n  NVM_SOURCE_LOCAL="$(nvm_source script)"\n  local NVM_EXEC_SOURCE\n  NVM_EXEC_SOURCE="$(nvm_source script-nvm-exec)"\n  local NVM_BASH_COMPLETION_SOURCE\n  NVM_BASH_COMPLETION_SOURCE="$(nvm_source script-nvm-bash-completion)"\n\n  # Downloading to $INSTALL_DIR\n  mkdir -p "$INSTALL_DIR"\n  if [ -f "$INSTALL_DIR/nvm.sh" ]; then\n    nvm_echo "=> nvm is already installed in $INSTALL_DIR, trying to update the script"\n  else\n    nvm_echo "=> Downloading nvm as script to \'$INSTALL_DIR\'"\n  fi\n  nvm_download -s "$NVM_SOURCE_LOCAL" -o "$INSTALL_DIR/nvm.sh" || {\n    nvm_echo >&2 "Failed to download \'$NVM_SOURCE_LOCAL\'"\n    return 1\n  } &\n  nvm_download -s "$NVM_EXEC_SOURCE" -o "$INSTALL_DIR/nvm-exec" || {\n    nvm_echo >&2 "Failed to download \'$NVM_EXEC_SOURCE\'"\n    return 2\n  } &\n  nvm_download -s "$NVM_BASH_COMPLETION_SOURCE" -o "$INSTALL_DIR/bash_completion" || {\n    nvm_echo >&2 "Failed to download \'$NVM_BASH_COMPLETION_SOURCE\'"\n    return 2\n  } &\n  for job in $(jobs -p | command sort)\n  do\n    wait "$job" || return $?\n  done\n  chmod a+x "$INSTALL_DIR/nvm-exec" || {\n    nvm_echo >&2 "Failed to mark \'$INSTALL_DIR/nvm-exec\' as executable"\n    return 3\n  }\n}\n\nnvm_try_profile() {\n  if [ -z "${1-}" ] || [ ! -f "${1}" ]; then\n    return 1\n  fi\n  nvm_echo "${1}"\n}\n\n#\n# Detect profile file if not specified as environment variable\n# (eg: PROFILE=~/.myprofile)\n# The echo\'ed path is guaranteed to be an existing file\n# Otherwise, an empty string is returned\n#\nnvm_detect_profile() {\n  if [ "${PROFILE-}" = \'/dev/null\' ]; then\n    # the user has specifically requested NOT to have nvm touch their profile\n    return\n  fi\n\n  if [ -n "${PROFILE}" ] && [ -f "${PROFILE}" ]; then\n    nvm_echo "${PROFILE}"\n    return\n  fi\n\n  local DETECTED_PROFILE\n  DETECTED_PROFILE=\'\'\n\n  if [ "${SHELL#*bash}" != "$SHELL" ]; then\n    if [ -f "$HOME/.bashrc" ]; then\n      DETECTED_PROFILE="$HOME/.bashrc"\n    elif [ -f "$HOME/.bash_profile" ]; then\n      DETECTED_PROFILE="$HOME/.bash_profile"\n    fi\n  elif [ "${SHELL#*zsh}" != "$SHELL" ]; then\n    if [ -f "$HOME/.zshrc" ]; then\n      DETECTED_PROFILE="$HOME/.zshrc"\n    elif [ -f "$HOME/.zprofile" ]; then\n      DETECTED_PROFILE="$HOME/.zprofile"\n    fi\n  fi\n\n  if [ -z "$DETECTED_PROFILE" ]; then\n    for EACH_PROFILE in ".profile" ".bashrc" ".bash_profile" ".zprofile" ".zshrc"\n    do\n      if DETECTED_PROFILE="$(nvm_try_profile "${HOME}/${EACH_PROFILE}")"; then\n        break\n      fi\n    done\n  fi\n\n  if [ -n "$DETECTED_PROFILE" ]; then\n    nvm_echo "$DETECTED_PROFILE"\n  fi\n}\n\n#\n# Check whether the user has any globally-installed npm modules in their system\n# Node, and warn them if so.\n#\nnvm_check_global_modules() {\n  local NPM_COMMAND\n  NPM_COMMAND="$(command -v npm 2>/dev/null)" || return 0\n  [ -n "${NVM_DIR}" ] && [ -z "${NPM_COMMAND%%"$NVM_DIR"/*}" ] && return 0\n\n  local NPM_VERSION\n  NPM_VERSION="$(npm --version)"\n  NPM_VERSION="${NPM_VERSION:--1}"\n  [ "${NPM_VERSION%%[!-0-9]*}" -gt 0 ] || return 0\n\n  local NPM_GLOBAL_MODULES\n  NPM_GLOBAL_MODULES="$(\n    npm list -g --depth=0 |\n    command sed -e \'/ npm@/d\' -e \'/ (empty)$/d\'\n  )"\n\n  local MODULE_COUNT\n  MODULE_COUNT="$(\n    command printf %s\\\\n "$NPM_GLOBAL_MODULES" |\n    command sed -ne \'1!p\' |                     # Remove the first line\n    wc -l | command tr -d \' \'                   # Count entries\n  )"\n\n  if [ "${MODULE_COUNT}" != \'0\' ]; then\n    # shellcheck disable=SC2016\n    nvm_echo \'=> You currently have modules installed globally with `npm`. These will no\'\n    # shellcheck disable=SC2016\n    nvm_echo \'=> longer be linked to the active version of Node when you install a new node\'\n    # shellcheck disable=SC2016\n    nvm_echo \'=> with `nvm`; and they may (depending on how you construct your `$PATH`)\'\n    # shellcheck disable=SC2016\n    nvm_echo \'=> override the binaries of modules installed with `nvm`:\'\n    nvm_echo\n\n    command printf %s\\\\n "$NPM_GLOBAL_MODULES"\n    nvm_echo \'=> If you wish to uninstall them at a later point (or re-install them under your\'\n    # shellcheck disable=SC2016\n    nvm_echo \'=> `nvm` Nodes), you can remove them from the system Node as follows:\'\n    nvm_echo\n    nvm_echo \'     $ nvm use system\'\n    nvm_echo \'     $ npm uninstall -g a_module\'\n    nvm_echo\n  fi\n}\n\nnvm_do_install() {\n  if [ -n "${NVM_DIR-}" ] && ! [ -d "${NVM_DIR}" ]; then\n    if [ -e "${NVM_DIR}" ]; then\n      nvm_echo >&2 "File \\"${NVM_DIR}\\" has the same name as installation directory."\n      exit 1\n    fi\n\n    if [ "${NVM_DIR}" = "$(nvm_default_install_dir)" ]; then\n      mkdir "${NVM_DIR}"\n    else\n      nvm_echo >&2 "You have \\$NVM_DIR set to \\"${NVM_DIR}\\", but that directory does not exist. Check your profile files and environment."\n      exit 1\n    fi\n  fi\n  # Disable the optional which check, https://www.shellcheck.net/wiki/SC2230\n  # shellcheck disable=SC2230\n  if nvm_has xcode-select && [ "$(xcode-select -p >/dev/null 2>/dev/null ; echo $?)" = \'2\' ] && [ "$(which git)" = \'/usr/bin/git\' ] && [ "$(which curl)" = \'/usr/bin/curl\' ]; then\n    nvm_echo >&2 \'You may be on a Mac, and need to install the Xcode Command Line Developer Tools.\'\n    # shellcheck disable=SC2016\n    nvm_echo >&2 \'If so, run `xcode-select --install` and try again. If not, please report this!\'\n    exit 1\n  fi\n  if [ -z "${METHOD}" ]; then\n    # Autodetect install method\n    if nvm_has git; then\n      install_nvm_from_git\n    elif nvm_has curl || nvm_has wget; then\n      install_nvm_as_script\n    else\n      nvm_echo >&2 \'You need git, curl, or wget to install nvm\'\n      exit 1\n    fi\n  elif [ "${METHOD}" = \'git\' ]; then\n    if ! nvm_has git; then\n      nvm_echo >&2 "You need git to install nvm"\n      exit 1\n    fi\n    install_nvm_from_git\n  elif [ "${METHOD}" = \'script\' ]; then\n    if ! nvm_has curl && ! nvm_has wget; then\n      nvm_echo >&2 "You need curl or wget to install nvm"\n      exit 1\n    fi\n    install_nvm_as_script\n  else\n    nvm_echo >&2 "The environment variable \\$METHOD is set to \\"${METHOD}\\", which is not recognized as a valid installation method."\n    exit 1\n  fi\n\n  nvm_echo\n\n  local NVM_PROFILE\n  NVM_PROFILE="$(nvm_detect_profile)"\n  local PROFILE_INSTALL_DIR\n  PROFILE_INSTALL_DIR="$(nvm_install_dir | command sed "s:^$HOME:\\$HOME:")"\n\n  SOURCE_STR="\\\\nexport NVM_DIR=\\"${PROFILE_INSTALL_DIR}\\"\\\\n[ -s \\"\\$NVM_DIR/nvm.sh\\" ] && \\\\. \\"\\$NVM_DIR/nvm.sh\\"  # This loads nvm\\\\n"\n\n  # shellcheck disable=SC2016\n  COMPLETION_STR=\'[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\\n\'\n  BASH_OR_ZSH=false\n\n  if [ -z "${NVM_PROFILE-}" ] ; then\n    local TRIED_PROFILE\n    if [ -n "${PROFILE}" ]; then\n      TRIED_PROFILE="${NVM_PROFILE} (as defined in \\$PROFILE), "\n    fi\n    nvm_echo "=> Profile not found. Tried ${TRIED_PROFILE-}~/.bashrc, ~/.bash_profile, ~/.zprofile, ~/.zshrc, and ~/.profile."\n    nvm_echo "=> Create one of them and run this script again"\n    nvm_echo "   OR"\n    nvm_echo "=> Append the following lines to the correct file yourself:"\n    command printf "${SOURCE_STR}"\n    nvm_echo\n  else\n    if nvm_profile_is_bash_or_zsh "${NVM_PROFILE-}"; then\n      BASH_OR_ZSH=true\n    fi\n    if ! command grep -qc \'/nvm.sh\' "$NVM_PROFILE"; then\n      nvm_echo "=> Appending nvm source string to $NVM_PROFILE"\n      command printf "${SOURCE_STR}" >> "$NVM_PROFILE"\n    else\n      nvm_echo "=> nvm source string already in ${NVM_PROFILE}"\n    fi\n    # shellcheck disable=SC2016\n    if ${BASH_OR_ZSH} && ! command grep -qc \'$NVM_DIR/bash_completion\' "$NVM_PROFILE"; then\n      nvm_echo "=> Appending bash_completion source string to $NVM_PROFILE"\n      command printf "$COMPLETION_STR" >> "$NVM_PROFILE"\n    else\n      nvm_echo "=> bash_completion source string already in ${NVM_PROFILE}"\n    fi\n  fi\n  if ${BASH_OR_ZSH} && [ -z "${NVM_PROFILE-}" ] ; then\n    nvm_echo "=> Please also append the following lines to the if you are using bash/zsh shell:"\n    command printf "${COMPLETION_STR}"\n  fi\n\n  # Source nvm\n  # shellcheck source=/dev/null\n  \\. "$(nvm_install_dir)/nvm.sh"\n\n  nvm_check_global_modules\n\n  nvm_install_node\n\n  nvm_reset\n\n  nvm_echo "=> Close and reopen your terminal to start using nvm or run the following to use it now:"\n  command printf "${SOURCE_STR}"\n  if ${BASH_OR_ZSH} ; then\n    command printf "${COMPLETION_STR}"\n  fi\n}\n\n#\n# Unsets the various functions defined\n# during the execution of the install script\n#\nnvm_reset() {\n  unset -f nvm_has nvm_install_dir nvm_latest_version nvm_profile_is_bash_or_zsh \\\n    nvm_source nvm_node_version nvm_download install_nvm_from_git nvm_install_node \\\n    install_nvm_as_script nvm_try_profile nvm_detect_profile nvm_check_global_modules \\\n    nvm_do_install nvm_reset nvm_default_install_dir nvm_grep\n}\n\n[ "_$NVM_ENV" = "_testing" ] || nvm_do_install\n\n} # this ensures the entire script is downloaded #\nEOF\n'})}),"\n",(0,t.jsx)(e.p,{children:"\u624b\u52a8\u6267\u884c\u811a\u672c"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"bash nvm-install.sh\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u5b89\u88c5\u6210\u529f\u540e\u4f1a\u63d0\u793a\u5982\u4e0b"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:'=> Compressing and cleaning up git repository\n\n=> Appending nvm source string to /Users/pptfz/.zshrc\n=> Appending bash_completion source string to /Users/pptfz/.zshrc\n=> Close and reopen your terminal to start using nvm or run the following to use it now:\n\nexport NVM_DIR="$HOME/.nvm"\n[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"  # This loads nvm\n[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\n'})}),"\n",(0,t.jsxs)(e.p,{children:["\u6309\u7167\u63d0\u793a\u9700\u8981\u5c06\u5982\u4e0b\u5185\u5bb9\u52a0\u5165\u5230\u672c\u673a\u7684\u76f8\u5e94\u6587\u4ef6\u4e2d\uff0c\u6211\u8fd9\u91cc\u4f7f\u7528\u7684\u662f ",(0,t.jsx)(e.code,{children:"zsh"})," \uff0c\u56e0\u6b64\u662f\u7528\u6237\u5bb6\u76ee\u5f55\u4e0b\u7684 ",(0,t.jsx)(e.code,{children:".zshrc"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:'export NVM_DIR="$HOME/.nvm"\n[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"  # This loads nvm\n[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\n'})}),"\n",(0,t.jsx)(e.p,{children:"\u9a8c\u8bc1\u5b89\u88c5"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"$ nvm -v nvm\n0.39.3\n"})}),"\n",(0,t.jsx)(e.h2,{id:"3\u4f7f\u7528",children:"3.\u4f7f\u7528"}),"\n",(0,t.jsx)(e.p,{children:":::tip\u8bf4\u660e"}),"\n",(0,t.jsxs)(e.p,{children:["\u4f7f\u7528 ",(0,t.jsx)(e.code,{children:"nvm install version"})," \u5b89\u88c5\u7684\u7b2c\u4e00\u4e2anode\u7248\u672c\u5c06\u6210\u4e3a\u9ed8\u8ba4\u7248\u672c"]}),"\n",(0,t.jsx)(e.p,{children:":::"}),"\n",(0,t.jsx)(e.p,{children:"\u5b89\u88c5\u6700\u65b0\u7248"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"nvm install node\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u5b89\u88c5\u6307\u5b9a\u7248\u672c"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"nvm install 12.22.1\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u67e5\u770b\u53ef\u6267\u884c\u6587\u4ef6\u5b89\u88c5\u8def\u5f84"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"nvm which 12.22\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u67e5\u770b\u53ef\u5b89\u88c5\u7684\u6240\u6709\u7248\u672c"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"nvm ls-remote\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u67e5\u770b\u5b89\u88c5\u7684\u6240\u6709\u7248\u672c\u53ca\u5f53\u524d\u4f7f\u7528\u7684\u7248\u672c"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"$ nvm list\n->     v16.20.0\n       v18.16.0\ndefault -> 18.16.0 (-> v18.16.0)\niojs -> N/A (default)\nunstable -> N/A (default)\nnode -> stable (-> v18.16.0) (default)\nstable -> 18.16 (-> v18.16.0) (default)\nlts/* -> lts/hydrogen (-> v18.16.0)\nlts/argon -> v4.9.1 (-> N/A)\nlts/boron -> v6.17.1 (-> N/A)\nlts/carbon -> v8.17.0 (-> N/A)\nlts/dubnium -> v10.24.1 (-> N/A)\nlts/erbium -> v12.22.12 (-> N/A)\nlts/fermium -> v14.21.3 (-> N/A)\nlts/gallium -> v16.20.0\nlts/hydrogen -> v18.16.0\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u5207\u6362\u7248\u672c"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"$ nvm use 18.16.0                        \nNow using node v18.16.0 (npm v9.5.1)\n"})}),"\n",(0,t.jsx)(e.h2,{id:"4\u914d\u7f6e\u52a0\u901f",children:"4.\u914d\u7f6e\u52a0\u901f"}),"\n",(0,t.jsx)(e.h3,{id:"41-\u914d\u7f6enpm\u5b89\u88c5\u52a0\u901f",children:"4.1 \u914d\u7f6enpm\u5b89\u88c5\u52a0\u901f"}),"\n",(0,t.jsx)(e.p,{children:"\u67e5\u770b\u9ed8\u8ba4\u6e90"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"npm config -g get registry\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u8bbe\u7f6e\u6dd8\u5b9d\u6e90"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"npm config -g set registry https://registry.npm.taobao.org\n"})}),"\n",(0,t.jsx)(e.h3,{id:"42-\u914d\u7f6envm\u5b89\u88c5\u52a0\u901f",children:"4.2 \u914d\u7f6envm\u5b89\u88c5\u52a0\u901f"})]})}function a(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(h,{...n})}):h(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>r});var t=i(96540);const s={},o=t.createContext(s);function l(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:l(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);